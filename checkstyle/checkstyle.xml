<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the "License"). See License in the project root for license information.
  -->

<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<!--
    Checkstyle-Configuration: (Enhanced) LinkedIn Style
    Description:
LinkedIn Java style.
-->
<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/suppressions.xml"/>
    </module>

    <!-- header -->
    <module name="RegexpHeader">
        <property name="header" value="/\*\n Copyright [0-9]* LinkedIn Corp.*"/>
    </module>

    <property name="severity" value="${checkstyle.severity}" default="error"/>

    <!-- LENGTHS -->

    <!-- Desired line length is 120 but allow some overrun beyond that -->
    <module name="LineLength">
        <property name="max" value="150"/>
        <message key="maxLineLen" value="Line is longer than {0,number,integer} characters (found {1,number,integer}). Try to keep lines under 120 characters."/>
    </module>
    <module name="RegexpMultiline">
        <property name="message" value="Multiple empty lines after this line"/>
        <property name="format" value="^(?!import|package).+[\r]?\n\s*[\r]?\n\s*[\r]?\n"/>
        <property name="fileExtensions" value="java"/>
    </module>
    <!-- Let others add content at the end of a file w/o "diff" command showing previous lines as changed -->
    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions" value="java"/>
    </module>
    <!-- There shall be no duplicated keys in properties files -->
    <module name="UniqueProperties"/>

    <module name="TreeWalker">

        <!-- ANNOTATIONS -->

        <!-- Locate annotations immediately after documentation block and before target element -->
        <module name="AnnotationLocation">
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <!-- No trailing empty parenthesis or commas -->
        <module name="AnnotationUseStyle">
            <property name="elementStyle" value="ignore"/>
        </module>
        <!-- The annotation @Deprecated and the Javadoc tag @deprecated must both be present when either of them is present -->
        <module name="MissingDeprecated"/>
        <!-- Ensure @Override is present when {@inheritDoc} Javadoc tag is present -->
        <module name="MissingOverride"/>
        <!-- Package level annotations belong in package-info.java -->
        <module name="PackageAnnotation"/>

        <!-- BLOCKS -->

        <!-- Nested blocks confuse the reader -->
        <module name="AvoidNestedBlocks"/>
        <!-- Checks for empty blocks with no comment or statement -->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <!-- Block opening brace on same line -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>
        <!-- Block closing brace for else, catch, finally on same line -->
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>
        <!-- Always use braces even if optional -->
        <module name="NeedBraces"/>

        <!-- CLASS DESIGN -->

        <!-- A class with only private constructors must be declared as final -->
        <module name="FinalClass"/>
        <!-- Classes containing only static methods should not have a public constructor -->
        <module name="HideUtilityClassConstructor"/>
        <!-- Use Interfaces only to define types -->
        <module name="InterfaceIsType"/>
        <!-- Too many differently rooted exceptions makes exception handling onerous -->
        <module name="ThrowsCount"/>
        <!-- Only static final, immutable, or annotated by specified annotation members may be public; others must be private or protected -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- CODING -->

        <!-- Use Java style array declarations (e.g. String[] names), not C style (e.g. String names[]) -->
        <module name="ArrayTypeStyle"/>
        <!-- If covariant equals defined, standard equals must also be defined -->
        <module name="CovariantEquals"/>
        <!-- Switch 'default' case must appear last -->
        <module name="DefaultComesLast"/>
        <!-- Override equals and hashCode together -->
        <module name="EqualsHashCode"/>
        <!-- No fall through in switch cases, even the last one -->
        <module name="FallThrough">
            <property name="checkLastCaseGroup" value="true"/>
        </module>
        <!-- Do not perform assignments embedded within expressions -->
        <module name="InnerAssignment"/>
        <!-- Switch statements must have a 'default' case -->
        <module name="MissingSwitchDefault"/>
        <!-- Do not modify the 'for' loop control variable -->
        <module name="ModifiedControlVariable"/>
        <!-- Each variable declaration must be on a separate line -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Each statement (i.e. code terminated by a semicolon) must be on a separate line -->
        <module name="OneStatementPerLine"/>
        <!-- Classes must have an explicit package declaration -->
        <module name="PackageDeclaration"/>
        <!-- Do not test boolean expressions against the values true or false -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Do not test for boolean conditions and return the values true or false -->
        <module name="SimplifyBooleanReturn"/>
        <!-- Do not use '==' to compare string against a literal; use 'equals' -->
        <module name="StringLiteralEquality"/>
        <!-- Use 'L' with long literals -->
        <module name="UpperEll"/>
        <!-- The order of modifiers must conform to JLS suggestions -->
        <module name="ModifierOrder"/>
        <!-- The JLS discourages the use redundant modifiers -->
        <module name="RedundantModifier"/>
        <!-- Ensure proper wrap lines on operators -->
        <module name="OperatorWrap"/>
        <!-- Avoid escaped unicode characters -->
        <module name="AvoidEscapedUnicodeCharacters"/>
        <!-- Ensure proper indentation for comments -->
        <module name="CommentsIndentation"/>
        <!-- Ensure that the class Foo is in a file named Foo.java -->
        <module name="OuterTypeFilename"/>
        <!-- Ensure that lines with code do not end with comment -->
        <module name="TrailingComment"/>
        <!-- Double brace initialization is considered as anti-pattern and should be avoided -->
        <module name="AvoidDoubleBraceInitialization"/>
        <!-- Ensure compliance with the declaration order suggested by the Code Conventions for the Java Programming Language -->
        <module name="DeclarationOrder">
            <property name="ignoreModifiers" value="true"/>
        </module>
        <!-- Ensure no empty statement -->
        <module name="EmptyStatement"/>
        <!-- String literal expressions should be on the left side of an equals comparison -->
        <module name="EqualsAvoidNull"/>
        <!-- A local variable shall not shadow a field that is defined in the same class -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- There cannot be a finalize method with zero parameters -->
        <module name="NoFinalizer"/>
        <!-- Clone method cannot be overridden from the Object class -->
        <module name="NoClone"/>
        <!-- Overloaded methods shall be grouped together -->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!-- Parameter assignment is not allowed -->
        <module name="ParameterAssignment"/>
        <!-- There shall be no unnecessary parentheses in a statement or expression -->
        <module name="UnnecessaryParentheses">
            <property name="tokens" value="IDENT,NUM_DOUBLE,NUM_FLOAT,NUM_INT,NUM_LONG,STRING_LITERAL,LITERAL_NULL,LITERAL_FALSE,
            LITERAL_TRUE,ASSIGN,LAMBDA,TEXT_BLOCK_LITERAL_BEGIN,LITERAL_INSTANCEOF,GT,LT,GE,LE,EQUAL,NOT_EQUAL,UNARY_MINUS,
            UNARY_PLUS,INC,DEC,LNOT,BNOT,POST_INC,POST_DEC" />
        </module>
        <!-- There shall be no unnecessary semicolon used after type declaration -->
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <!-- There shall be no unnecessary semicolon used after type member declaration -->
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <!-- There shall be no unnecessary semicolon used in last resource declaration -->
        <module name="UnnecessarySemicolonInTryWithResources"/>

        <!-- IMPORTS -->

        <!-- No imports statements using '*' notation except static imports -->
        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <!-- Do not import 'sun' packages -->
        <module name="IllegalImport"/>
        <!-- Do not duplicate import statements -->
        <module name="RedundantImport"/>
        <!-- Eliminate unused imports -->
        <module name="UnusedImports">
            <property name="processJavadoc" value="true" />
        </module>
        <!-- Ensure proper ordering/grouping of imports -->
        <module name="CustomImportOrder">
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="THIRD_PARTY_PACKAGE###STATIC"/>
        </module>
        <!-- The static, non-final variable names must conform to a specified pattern -->
        <module name="StaticVariableName"/>

        <!-- JAVADOC COMMENTS -->

        <!-- If you have a Javadoc comment, make sure it is properly formed -->
        <module name="JavadocStyle">
            <property name="checkFirstSentence" value="false"/>
        </module>

        <module name="JavadocMethod">
            <property name="tokens" value="METHOD_DEF,ANNOTATION_FIELD_DEF"/>
        </module>

        <module name="MissingJavadocMethodCheck">
            <property name="scope" value="public"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="minLineCount" value="1"/>
            <property name="tokens" value="METHOD_DEF,ANNOTATION_FIELD_DEF"/>
            <property name="ignoreMethodNamesRegex" value="^test.*$"/>
        </module>

        <module name="MissingJavadocType">
            <property name="tokens" value="INTERFACE_DEF,ANNOTATION_DEF,RECORD_DEF"/>
        </module>

        <module name="NonEmptyAtclauseDescription">
            <property name="javadocTokens" value="PARAM_LITERAL,RETURN_LITERAL,DEPRECATED_LITERAL"/>
        </module>

        <!-- Ensure proper order of javadoc block-tags or javadoc tags -->
        <module name="AtclauseOrder"/>

        <!-- NAMING CONVENTIONS -->

        <!-- Long anonymous inner classes should usually be refactored into a named inner class -->
        <module name="AnonInnerLength">
            <property name="max" value="25"/>
        </module>
        <!-- Generic parameters for a class must be uppercase letters (e.g. <T>, <OLD>) -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]+$"/>
        </module>
        <!-- Constants must be all uppercase letters separated by underscores -->
        <module name="ConstantName">
            <property name="format" value="^(_?log)|([A-Z][A-Z0-9]*(_[A-Z0-9]+)*)$"/>
        </module>
        <!-- Local variables must be camel case starting with lowercase letter -->
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^_[a-z][a-zA-Z0-9]*$"/>
        </module>
        <!-- Method name must be camel case starting with a lowercase letter -->
        <module name="MethodName"/>
        <!-- Generic parameters for a method must be uppercase letters (e.g. <V>, <NEW>) -->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]+$"/>
        </module>
        <!-- Package name must be all lowercase letters separated by periods -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <!-- Parameters must be camel case starting with a lowercase letter -->
        <module name="ParameterName"/>
        <!-- Type names must be camel case starting with an uppercase letter -->
        <module name="TypeName"/>
        <!-- Abbreviation in names must contain no more than '4' consecutive capital letters -->
        <module name="AbbreviationAsWordInName"/>
        <!-- Ensure that catch parameter names conform to a specified pattern -->
        <module name="CatchParameterName">
            <property name="format" value="^(e|t|[a-z][a-z][a-zA-Z]*)$"/>
        </module>

        <!-- WHITESPACE -->

        <module name="GenericWhitespace"/>
        <!-- Ensure that non-whitespace characters are separated by no more than one whitespace -->
        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="true"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad">
            <property name="tokens" value="RPAREN,TYPECAST"/>
        </module>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

        <!-- Do not allow meaningless, IDE generated parameter names -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="[\s]+arg[\d]+[,\)]"/>
            <property name="message" value="Replace argN with a meaningful parameter name"/>
        </module>

        <!-- Do not allow more than a certain number of parameters per method -->
        <module name="ParameterNumber">
            <property name="max" value="15"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
    </module>

    <!-- Do not allow tab characters in source files -->
    <module name="FileTabCharacter"/>

    <!-- Ensure parameter and exception names are present on @param and @throws tags -->
    <module name="RegexpSingleline">
        <property name="format" value="\*[\s]*@(throws|param)[\s]*$"/>
        <property name="message" value="Missing parameter or exception name"/>
    </module>
    <!-- IDE generated code must be reviewed by developer -->
    <module name="RegexpSingleline">
        <property name="format" value="\/\/[\s]*TODO[\s]+Auto-generated"/>
        <property name="message" value="Replace IDE generated code with real implementation"/>
    </module>
    <!-- Detect commonly misspelled Javadoc tags -->
    <module name="RegexpSingleline">
        <property name="format" value="\*[\s]*@(params|throw|returns)[\s]+"/>
        <property name="message" value="Correct misspelled Javadoc tag"/>
    </module>

</module>
