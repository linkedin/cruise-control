/*
 * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the "License"). See License in the project root for license information.
 */
import com.linkedin.gradle.build.DistributeTask

plugins {
  id "com.jfrog.artifactory"
  id "idea"
  id "jacoco" // Java Code Coverage plugin
  id "com.github.ben-manes.versions" version "0.36.0"
  id "com.github.spotbugs" version "4.6.0" apply false
}

group = 'com.linkedin.cruisecontrol'

project.ext {
  pomConfig = {
    url "https://github.com/linkedin/cruise-control"
    licenses {
      license {
        name "BSD 2-CLAUSE LICENSE"
        url "https://opensource.org/licenses/BSD-2-Clause"
      }
    }
    developers {
      developer {
        name "Adem Efe Gencer"
        email "efegencer@gmail.com"
      }
      developer {
        name "Jiangjie (Becket) Qin"
        email "becket.qin@gmail.com"
      }
      developer {
        name "Sir Joel Koshy"
        email "jjkoshy@yahoo.com"
      }
    }
    scm {
      url "https://github.com/linkedin/cruise-control"
    }
  }
  buildVersionFileName = "cruise-control-version.properties"
  commitId = project.hasProperty('commitId') ? commitId : null
}


allprojects {

  repositories {
    mavenCentral()
    jcenter()
  }

  apply plugin: 'com.github.ben-manes.versions'

  dependencyUpdates {
    revision="release"
    resolutionStrategy {
      componentSelection { rules ->
        rules.all { ComponentSelection selection ->
          boolean rejected = ['snap', 'alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
          }
          if (rejected) {
            selection.reject('Release candidate')
          }
        }
      }
    }
  }
}

subprojects {
  group = rootProject.group
  version = rootProject.version

  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: "com.github.spotbugs"
  apply plugin: 'jacoco'

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  //code quality and inspections
  checkstyle {
    project.ext.checkstyleVersion = '8.20'
    ignoreFailures = false
    configDir = file("$rootDir/checkstyle")
  }

  spotbugs {
    toolVersion = '4.1.4'
    excludeFilter = file("$rootDir/gradle/findbugs-exclude.xml")
    ignoreFailures = false
    jvmArgs = [ '-Xms512m' ]
    maxHeapSize = '768m'
    showProgress = true
  }
  spotbugsMain {
    reports {
      xml.enabled = (project.hasProperty('xmlFindBugsReport'))
      html.enabled = (!project.hasProperty('xmlFindBugsReport'))
    }
  }
  spotbugsTest {
    reports {
      xml.enabled = (project.hasProperty('xmlFindBugsReport'))
      html.enabled = (!project.hasProperty('xmlFindBugsReport'))
    }
  }
  // aggregated task for checkstyle and spotbugs static analyzers
  task('analyze') {
    dependsOn('checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest')
    doLast {}
  }

  test.dependsOn('checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest')

  jar {
    from "$rootDir/LICENSE"
    from "$rootDir/NOTICE"
  }

  test {
    useJUnit {}
    testLogging {
      events "passed", "failed", "skipped"
      exceptionFormat = 'full'
    }
    if (!project.hasProperty("maxParallelForks")) {
      maxParallelForks = Runtime.runtime.availableProcessors()
    }
  }
}

project(':cruise-control-core') {
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.artifactory'

  configurations {
    testOutput
  }

  dependencies {
    configurations.all {
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
      exclude group: 'log4j', module: 'log4j'
    }
    compile "org.slf4j:slf4j-api:1.7.30"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
    compile 'junit:junit:4.13.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.35.v20201120'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    testOutput sourceSets.test.output
  }

  publishing {
    publications {
      java(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        pom.withXml {
          def root = asNode()
          root.appendNode('name', 'cruise-control-core')
          root.appendNode('description', 'cruise control core related')
          root.children().last() + rootProject.ext.pomConfig
        }
      }
    }
  }

  artifactoryPublish.dependsOn assemble
  artifactoryPublish.dependsOn publishToMavenLocal

  sourceSets {
    main {
      java {
        srcDirs = ['src/main/java']
      }
    }
    test {
      java {
        srcDirs = ['src/test/java']
      }
    }

  }

}

project(':cruise-control') {
  apply plugin: 'scala'
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.artifactory'

  //needed because our java classes depend on scala classes, so must be compiled by scala
  sourceSets {
    main {
      java {
        srcDirs = []
      }

      scala {
        srcDirs = ['src/main/java', 'src/main/scala']
      }
    }

    test {
      java {
        srcDirs = []
      }
      scala {
        srcDirs = ['src/test/java', 'src/test/scala']
      }
    }

  }

  dependencies {
    configurations.all {
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
      exclude group: 'log4j', module: 'log4j'
    }
    compile project(':cruise-control-metrics-reporter')
    compile project(':cruise-control-core')
    compile "org.slf4j:slf4j-api:1.7.30" // TODO: Upgrade log4j to log4j2 to use async logger.
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
    compile "org.apache.zookeeper:zookeeper:${zookeeperVersion}"
    compile "org.apache.kafka:kafka_2.11:$kafkaVersion"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "org.scala-lang:scala-library:2.11.12"
    compile 'junit:junit:4.13.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.12'
    compile 'com.google.code.gson:gson:2.8.6'
    compile 'org.eclipse.jetty:jetty-server:9.4.35.v20201120'
    compile 'io.dropwizard.metrics:metrics-core:3.2.6'
    compile 'com.nimbusds:nimbus-jose-jwt:9.7'
    compile 'com.101tec:zkclient:0.11'
    compile 'io.swagger.parser.v3:swagger-parser-v3:2.0.24'
    compile 'io.github.classgraph:classgraph:4.8.102'

    testCompile project(path: ':cruise-control-metrics-reporter', configuration: 'testOutput')
    testCompile project(path: ':cruise-control-core', configuration: 'testOutput')
    testCompile "org.scala-lang:scala-library:2.11.12"
    testCompile 'org.easymock:easymock:4.2'
    testCompile "org.apache.kafka:kafka_2.11:$kafkaVersion:test"
    testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    testCompile 'commons-io:commons-io:2.8.0'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.12:tests'
    testCompile 'org.bouncycastle:bcpkix-jdk15on:1.68'
    testCompile 'org.apache.kerby:kerb-simplekdc:2.0.1'

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

  }

  publishing {
    publications {
      java(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        pom.withXml {
          def root = asNode()
          root.appendNode('name', 'cruise-control')
          root.appendNode('description', 'cruise control related')
          root.children().last() + rootProject.ext.pomConfig
        }
      }
    }
  }

  artifactoryPublish.dependsOn assemble
  artifactoryPublish.dependsOn publishToMavenLocal

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('log4j-slf4j-impl*')
    }
    from (configurations.runtime) {

    }
    into "$buildDir/dependant-libs"
    duplicatesStrategy 'exclude'
  }

  tasks.create(name: "buildFatJar", type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
  }

  compileScala.finalizedBy(tasks.copyDependantLibs)

  task determineCommitId {
    def takeFromHash = 40
    if (commitId) {
      commitId = commitId.take(takeFromHash)
    } else if (file("$rootDir/.git/HEAD").exists()) {
      def headRef = file("$rootDir/.git/HEAD").text
      if (headRef.contains('ref: ')) {
        headRef = headRef.replaceAll('ref: ', '').trim()
        if (file("$rootDir/.git/$headRef").exists()) {
          commitId = file("$rootDir/.git/$headRef").text.trim().take(takeFromHash)
        }
      } else {
        commitId = headRef.trim().take(takeFromHash)
      }
    } else {
      commitId = "unknown"
    }
  }

  // Referenced similar method for getting software version in Kafka code.
  task createVersionFile(dependsOn: determineCommitId) {
    ext.receiptFile = file("$buildDir/cruise-control/$buildVersionFileName")
    outputs.file receiptFile
    outputs.upToDateWhen { false }
    doLast {
      def data = [
          commitId: commitId,
          version: version,
      ]

      receiptFile.parentFile.mkdirs()
      def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
      receiptFile.setText(content, "ISO-8859-1")
    }
  }

  jar {
    dependsOn createVersionFile
    from("$buildDir") {
      include "cruise-control/$buildVersionFileName"
    }
  }
}

project(':cruise-control-metrics-reporter') {
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.artifactory'

  configurations {
    testOutput
  }

  dependencies {
    configurations.all {
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
      exclude group: 'log4j', module: 'log4j'
    }
    compile "org.slf4j:slf4j-api:1.7.30"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
    compile "org.apache.kafka:kafka_2.11:$kafkaVersion"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile 'junit:junit:4.13.1'
    compile 'org.apache.commons:commons-math3:3.6.1'

    testCompile 'org.bouncycastle:bcpkix-jdk15on:1.68'
    testCompile 'org.powermock:powermock-module-junit4:2.0.9'
    testCompile 'org.powermock:powermock-api-easymock:2.0.9'
    testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    testCompile "org.apache.kafka:kafka-clients:$kafkaVersion"
    testCompile 'commons-io:commons-io:2.8.0'
    testOutput sourceSets.test.output

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
  }

  publishing {
    publications {
      java(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        pom.withXml {
          def root = asNode()
          root.appendNode('name', 'cruise-control-metrics-reporter')
          root.appendNode('description', 'cruise control metrics reporter related')
          root.children().last() + rootProject.ext.pomConfig
        }
      }
    }
  }

  artifactoryPublish.dependsOn assemble
  artifactoryPublish.dependsOn publishToMavenLocal

}

artifactoryPublish.skip = true
artifactory {
  contextUrl = 'https://linkedin.jfrog.io/linkedin'
  publish {
    repoKey = 'cruise-control'
    username = System.getenv('ARTIFACTORY_USER')
    password = System.getenv('ARTIFACTORY_KEY')

    defaults {
      publications ('java')
      publishBuildInfo = true
      publishArtifacts = true
      publishPom = true
      publishIvy = true
    }
  }
  clientConfig.setIncludeEnvVars(false)
}

task distributeBuild(type: DistributeTask) {
  dependsOn ':artifactoryPublish', ':cruise-control:artifactoryPublish', ':cruise-control-core:artifactoryPublish', ':cruise-control-metrics-reporter:artifactoryPublish'
}

task buildApiWiki(type: Exec) {
  workingDir '.'
  commandLine './build_api_wiki.sh'
}

//wrapper generation task
wrapper {
  gradleVersion = '5.6.4'
  distributionType = Wrapper.DistributionType.ALL
}
